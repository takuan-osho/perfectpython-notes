Pythonの基本
============

この第2章で扱われている項目は以下の通りです。

#. インデント(ブロック)
#. 入出力
#. コメント
#. ドックストリングとオンラインヘルプ
    #. 1行のドックストリング
    #. 複数行のドックストリング
#. 識別子(名前)
    #. 特別な識別子(名前)
#. 変数
    #. グローバル変数
    #. ノンローカル変数
    #. 定数
#. 予約語
#. デバッグ・トレースバック
#. メモリ管理

本の内容のちょっとしたところに「細かいけれど本格的にPythonを使っていく上では理解が必要なもの」が結構書かれているので、それを踏まえながら読むといいと思います。

::

   「本の引用」と「著者の見解・考え」を明確にするために、以下の文章では「本の引用」またはそれに準ずる内容の記述箇所については整形済みブロック内に書くことにします。


インデント(ブロック)
--------------------

::

   Pythonの特徴・言語仕様として最もよく取り上げられるもの。
   インデントのレベル(深さ)でプログラムのブロック、スコープを定義している。

インデントをする際にタブとスペースを混在させると非常に面倒になるので、統一することを推奨します。

Pythonのコーディングスタイルガイドとなっている `PEP8 <http://www.python.org/dev/peps/pep-0008/>`_ (`日本語 <http://oldriver.org/python/pep-0008j.html>`_)にならい、インデント1段につきスペース4文字を使用するのが一番無難。

タブを押したときにスペース4文字になるようにエディタの設定を変更しておくとコードを書くときに楽になると思います。


入出力
------

出力に使うprint()関数はPython3.xで使える。

Python2.xでのprint()関数を使う時にはfuture文で指定しない限り使えない。


コメント
--------

::
   
   Pythonでコメントを各方法は1つだけです。Pythonのハッシュ記号「#」から始まり、改行されるまでがコメントと見なされます。
   Pythonには複数行をコメントアウトできるブロックコメントがありません。

だそうです。


ドックストリングとオンラインヘルプ
----------------------------------


::
   
   Pythonの関数や、クラスの使い方はドックストリング(docstring)と呼ばれる方法で記述します。
   
このドックストリングを記述しておくと、対話環境使用時にhelp()関数でドックストリングに書かれた内容を見ることができる。

他の方がどうしているか気になっている点。

- ドックストリングに使う3重クオートを、シングルクォートに統一しているか、ダブルクォートに統一しているか、それともケースバイケースで使い分けているかどうかということ。


識別子
------

使える文字の種類などの条件は本を参照。

特別な識別子
^^^^^^^^^^^^

「_(アンダースコア)」で始まる識別子と「__(アンダースコア2つ)」で始まる識別子は特別な意味を持つ。

「_(アンダースコア)」で始まる場合は、モジュールからワイルドカード「*」でインポートした場合にインポートされません。
::

   # 以下のように書いてもインポートされない、ということです
   from foo import *

クラス内に「__(アンダースコア2つ)」で始まる識別子を使った場合は、クラス内のプライベートな識別子として特殊な扱いを受けます。


変数
----

